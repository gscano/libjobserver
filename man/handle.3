.TH JOBSERVER 3

.SH NAME

jobserver_launch_job, jobserver_clear - spawn a job or clear the jobserver

.SH SYNOPSIS

.B #include <jobserver.h>

.B typedef int (*jobserver_main_callback_t)(void * \fIanchor\fP, void * \fIdata\fP);
.br
.B typedef void (*jobserver_exit_callback_t) (void * \fIanchor\fP, void * \fIdata\fP, int \fIstatus\fP);

.B int jobserver_launch_job(struct jobserver * \fIjs\fP, int \fIwait\fP, bool \fIshared\fP, jobserver_main_callback_t \fImain\fP, void * \fIinit\fP, jobserver_exit_callback_t \fIexit\fP, void * \fIdata\fP);
.br
.B int jobserver_clear(struct jobserver * \fIjs\fP);

.SH DESCRIPTION

The
.BR jobserver_launch_job ()
function adds a new job to jobserver \fIjs\fP using the callback
function \fIfunc\fP as the main function of the new process.

The callback \fIdone\fP is called when the job terminates its execution and
is later collected by \fBjobserver_terminate_job\fP(3), \fBjobserver_wait\fP(3),
\fBjobserver_collect\fP(3), or \fBjobserver_clear\fP().

Because the jobserver might not have any tokens left to start a new job,
the function might \fIwait\fP for a token to become available (see
.BR poll(2)
for the different types of value it may take).

Jobserver \fIjs\fP could be \fIshared\fP with the new
process such that it would be possible to use \fBjobserver_connect\fP(3)
and access jobserver \fIjs\fP in the new process.

\fIanchor\fP is passed as-is from the jobserver \fIjs\fP
structure (see
.BR jobserver (7).
.br
\fIinit\fP is passed to \fImain\fP.
.br
\fIdata\fP is passed to \fIexit\fP.
.br
The \fBjobserver_exit_callback_t\fP receives the exit status of the spwaned process as
specified in
.BR wait (2).

The
.BR jobserver_clear ()
function kills all remaining jobs of jobserver \fIjs\fP.

.SH RETURN VALUE

On success, \fBjobserver_launch_job\fP() and \fBjobserver_clear\fP() return
\fB0\fP. On error, \fB-1\fP is returned and \fIerrno\fP is set accordingly.

.SH ERROR

.TP
.B EAGAIN
No token could be obtained.
.TP
.B EBADF
The reading end of the jobserver pipe is not open for reading.
The jobserver should be closed.
.TP
.B ECHILD
A child that was not a job exited
(see section \fBHandling forks\fP in \fBjobserver\fP(7)).
.TP
.B EINTR
The function was interupted by a signal that was not \fBSIGCHLD\fP.
.TP
.B ENOMEM
Not enough memory.

.SH SEE ALSO

.BR jobserver (7),
.BR jobserver_collect (3),
.BR jobserver_connect (3),
.BR jobserver_close (3),
.BR jobserver_create (3),
.BR jobserver_create_n (3),
.BR jobserver_print (3),
.BR jobserver_getenv (3),
.BR jobserver_setenv (3),
.BR jobserver_terminate_job (3),
.BR jobserver_unsetenv (3),
.BR jobserver_wait (3)
