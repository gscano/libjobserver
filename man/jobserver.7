.TH JOBSERVER 7

.SH NAME

Jobserver - A set of functions to handle parallel jobs in a build automation
application compatible with
.UR https://www.gnu.org/software/make/
GNU Make
.UE

.SH DESCRIPTION

The purpose of the jobserver is to limit the number of
concurrent processes spawned by a program and its children,
and more specifically by a build automation software.

The first process initiates the jobserver with a maximum
number of parallel job tokens. To spawn a new child, the
jobserver locks an unused token if any is available. Otherwise,
it has to wait for one of its children or sibling to exit in
order to reuse the associated token. A child process will
search the environment to access the jobserver and try to
lock a token whenever it has to spawn a child, effectively
sharing the ability to do so with its siblings and parents.

.SS Header

.B #include <jobserver.h>

.B struct jobserver
.br
{
.in +0.5i
.br
.B bool \fIdry_run\fP;

.B pid_t \fIstopped\fP;
.br
.B int \fIstatus\fP;

.B ...
.br
.in
};

.B typedef int (*jobserver_main_callback_t)(void * \fIdata\fP, size_t \fIid\fP);
.br
.B typedef void (*jobserver_exit_callback_t)(void * \fIdata\fP, size_t \fIid\fP, int \fIstatus\fP);

.B void jobserver_close_(struct jobserver * \fIjs\fP, bool \fIinherit\fP);

.SS Configuration

A jobserver, either created or joined, shall be stopped immediately
if \fIdry_run\fP is \fBtrue\fP.

.SS Handling forks

Creating or connecting to a jobserver installs a signal handler for
\fBSIGCHLD\fP in order, when a child exits, to execute the
\fBjobserver_callback_return_t\fP callback and release the token
associated with the job.

Suppose that the application using the jobserver spawned children without
calling \fBjobserver_launch_job\fP(3):

.IP
* If \fBSIGCHLD\fP is received while in a potentially blocking function
such as \fBjobserver_launch_job\fP(3) or \fBjobserver_wait\fP(3)
the terminated process might not be a job. In this case,
\fB-1\fP is returned, \fIerrno\fP is set to \fBECHILD\fP, and
the \fIstopped\fP and \fIstatus\fP fields of the \fBjobserver\fP
structure receive the pid and the exit status of the stopped
process as per \fBwaitpid\fP(2).

.IP
* If the application waited for a child to exit (see \fBwait\fP(2)),
the waited process could be a job. In this case,
\fBjobserver_terminate_job\fP(3) \fBmust be called\fP. Failure
to do so will cause the \fBjobserver_wait\fP(3) or
\fBjobserver_collect\fP(3) functions to \fBnever\fP return \fB0\fP.

.PP
It is important to note that when a fork happens outside of
\fBjobserver_launch_job\fP(3), the jobserver would be shared with
the new process, including the signal handler. You might want to
call \fBjobserver_close\fP(3) or \fBjobserver_close_\fP().

.SS Internal functions

.B void jobserver_close_(struct jobserver * \fIjs\fP, bool \fIinherit\fP);

.IP
The function \fBjobserver_close_\fP() can be called in a child when
forking manually in order to close jobserver \fIjs\fP in the child.
In particular, the function cleans up the \fIjs\fP data structure
and resets the signal handler for \fBSIGCHLD\fP to its default value.
If \fIinherit\fP is true, the jobserver remains available in the child
but a new local instance has to be created with \fBjobserver_reconnect\fP(3).
.PP

.SH ENVIRONMENT

According to the GNU Make documentation the jobserver token pipe
is passed from one process to the other with the
.B MAKEFLAGS
environment variable.

The letter \(aqn\(aq corresponding to the \fIdry_run\fP option
is looked up or inserted in the first word of this variable.

The string \fB--jobserver-fds=\fP (for GNU Make versions lower than 4.1) or
\fB--jobserver-auth=\fP (for GNU Make versions greater than 4.2)
is followed by a pair, separated by a comma (\(aq,\(aq), of file descriptors
corresponding to the read and write sides of the token pipe.

.SH CONFORMING TO

.UR https://www.gnu.org/software/make/manual/html_node/Job-Slots.html#Job-Slots
Section 13.1
.UE
of
.UR https://www.gnu.org/software/make/
GNU Make
.UE .

.SH EXAMPLE

The following program runs \fBexecv\fP(3) on each of its argument using a
jobserver which size is given as its first argument:

.EX
a.out 2 '/usr/bin/date --iso-8601' '/usr/bin/hostname -i' /usr/bin/whoami
a.out ! '/usr/bin/make --version' '/usr/bin/sleep 2'
.EE

When '!' is given, it expects the jobserver to be preexisting (usually created
by \fBmake\fP(1)).

.ta 0.8in
.EX
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "jobserver.h"

int run(void * data_)// Not empty
{
  fprintf(stderr, "Launching job '%s'.\\n", (char *)data_);

  int size = 1;

  char * data = data_;
  while((data = strchr(data, ' ')) != NULL)
    {
      ++size;
      ++data;
    }

  char ** args = alloca(size * sizeof(char *));

  args[0] = strtok(data_, " ");
  args[size] = NULL;

  size = 1;
  while((data = strtok(NULL, " ")) != NULL)
    args[size++] = data;

  int status = execv(args[0], args);

  if(status != 0) fprintf(stderr, "Execv failed: %m.\\n");

  return status;
}

void end(void * data, int status)
{
  fprintf(stderr, "Job '%s' collected with status: %d.\\n", (char *)data, status);
}

void connect_to(struct jobserver * js, char * tokens)
{
  fprintf(stderr, "Connecting to jobserver ...");

  if(jobserver_connect(js) == -1)
    {
      fprintf(stderr, " no jobserver found");

      if(*tokens == '!')
	{
	  if(errno == EACCES)
	    fprintf(stderr, " recursive make invocation without '+'");

	  fprintf(stderr, " and '!' was specified.\\n");
	  exit(EXIT_FAILURE);
	}
      else if(errno == ENODEV)
	{
	  fprintf(stderr, ".\\nCreating jobserver ...");

	  if(jobserver_create_n(js, atoi(tokens), 't') == -1)
	    exit(EXIT_FAILURE);

	  fprintf(stderr, " done.\\n");
	}
      else
	{
	  fprintf(stderr, ", error (%m).\\n");
	  exit(EXIT_FAILURE);
	}
    }
}

//Usage: tokens [cmds ...]
int main(int argc, char ** argv)
{
  const int shift = 2;

  if(argc < shift)
    return EXIT_FAILURE;

  struct jobserver js;
  connect_to(&js, argv[1]);

  for(int i = shift; i < argc; ++i)
    if(strlen(argv[i]) > 0)
      if(jobserver_launch_job(&js, -1, true, argv[i], run, end) == -1)
	return EXIT_FAILURE;

  int status;
  while((status = jobserver_collect(&js, -1)) != 0)
    if(status == -1 && errno != EINTR)
      return EXIT_FAILURE;

  if(jobserver_close(&js) != 0)
    return EXIT_FAILURE;

  return EXIT_SUCCESS;
}
.EE

.SH SEE ALSO

.BR jobserver_clear (3),
.BR jobserver_collect (3),
.BR jobserver_connect (3),
.BR jobserver_connect_to (3),
.BR jobserver_close (3),
.BR jobserver_create (3),
.BR jobserver_create_n (3),
.BR jobserver_launch_job (3),
.BR jobserver_print (3),
.BR jobserver_getenv (3),
.BR jobserver_setenv (3),
.BR jobserver_terminate_job (3),
.BR jobserver_unsetenv (3),
.BR jobserver_wait (3)
