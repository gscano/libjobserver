.TH JOBSERVER 3

.SH NAME

jobserver_read_env, jobserver_write_env - manipulate a jobserver environment string

.SH SYNOPSIS

.B #include <jobserver.h>

.B int jobserver_read_env(char const * \fIenv\fP, int * \fIread\fP, int * \fIwrite\fP, bool * \fIdry_run\fP);


.B char * jobserver_write_env(char const * \fIenv\fP, int \fIread\fP, int \fIwrite\fP, bool \fIdry_run\fP);

.SH DESCRIPTION

The
.BR jobserver_read_env ()
function looks for the
.I read
and
.I write
file descriptors of the jobserver token pipe as well as its
\fIdry_run\fP status in \fIenv\fP.

The
.BR jobserver_write_env ()
function updates the environment string \fIenv\fP in a newly
allocated buffer.
If one of the file descriptors \fIread\fP and \fIwrite\fP is
less than \fB-1\fP then the file descriptors are not written,
effectively removing the jobserver from the environment string.
The \fIdry_run\fP status is always updated.


.SH RETURN VALUE

On success, the
.BR jobserver_read_env ()
function returns \fB0\fP. On error, \fP-1\fP is returned and
\fIerrno\fP is set accordingly.

If \fB0\fP is returned and both \fIread\fP and \fIwrite\fP are set to \fB-1\fP,
then the jobserver is non existant, either because the
\fBMAKEFLAGS\fP environment variable is not defined or because the
\fB--jobserver-auth\fP (or \fB--jobserver-fds\fP) option is not used
(see \fBENVIRONMENT\fP in
.BR jobserver (7).
The \fIdry_run\fP status is always collected.

On success, the
.BR jobserver_write_env ()
function returns a newly allocated buffer containing the environment string.
On error, \fBNULL\fP is returned and
\fIerrno\fP is set accordingly.

.SH ERROR

.TP
.B ENOMEM
.BR (jobserver_write_env ())
Not enough memory to allocate the buffer.
.TP
.B EPROTO
.BR (jobserver_read_env ())
Error while parsing the input.
.br
.BR (jobserver_write_env ())
Error while writing the output.

.SH SEE ALSO

.BR jobserver (7),
.BR jobserver_getenv (3),
.BR jobserver_setenv (3),
.BR jobserver_unsetenv (3)
