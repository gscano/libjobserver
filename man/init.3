.TH JOBSERVER 3

.SH NAME
jobserver_connect, jobserver_connect_to, jobserver_reconnect, jobserver_create, jobserver_create_n, jobserver_close - connect to or create and then quit a jobserver

.SH SYNOPSIS

.B #include <jobserver.h>

.N void jobserver_init(struct jobserver * \fIjs\fP);

.B int jobserver_connect(struct jobserver * \fIjs\fP);
.br
.B int jobserver_connect_to(struct jobserver * \fIjs\fP, int \fIread\fP, int \fIwrite\fP, bool \fIdry_run\fP);
.br
.B int jobserver_reconnect(struct jobserver * \fIjs\fP);

.B int jobserver_create  (struct jobserver * \fIjs\fP, char const * \fItokens\fP);
.br
.B int jobserver_create_n(struct jobserver * \fIjs\fP, size_t \fIsize\fP, char \fItoken\fP);

.B int jobserver_close(struct jobserver * \fIjs\fP);

.SH DESCRIPTION

The
.BR jobserver_init ()
function initializes the jobserver so that a call to
.BR jobserver_close ()
on an unstarted jobserver gracefully returns.

The
.BR jobserver_connect ()
function tries to connect to an environment-defined jobserver \fIjs\fP.
.br
The
.BR jobserver_connect_to()
function tries to connect to a jobserver \fIjs\fP based on the token pipe
file descriptors \fIread\fP and \fIwrite\fP with the given \fIdry_run\fP status.
.br
The
.BR jobserver_reconnect()
function tries to connect to jobserver \fIjs\fP, usually initialized with
.BR jobserver_getenv (3),
and without looking at the environment again.

The
.BR jobserver_create ()
and
.BR jobserver_create_n ()
functions create a new jobserver \fIjs\fP and publish it to the environment.
The jobserver is initialized with either a null-terminated word of
\fItokens\fP or with \fIsize\fP \fItoken\fPs as additional job slots
to the free token.
.br
To create a jobserver that spawns one child after the other, no additional
token need be passed. In general, if the jobserver is created after a
\fB-j X\fP option, \fIsize\fP or \fIstrlen(tokens)\fP should be \fBX\fP-1.

The
.BR jobserver_close ()
function closes jobserver \fIjs\fP if there are no remaining jobs.
Note that it does not modify the environment variable, use
.BR jobserver_unsetenv (3)
to achieve this.

.SH RETURN VALUE

On success, the \fBjobserver_connect\fP(), \fBjobserver_connect_to\fP()
\fBjobserver_reconnect\fP(), and \fBjobserver_close\fP() functions return \fB0\fP.

On success, the \fBjobserver_create\fP() and \fBjobserver_create_n\fP() functions
return the number of possible parallel jobs, that is the number tokens available
in the jobserver pipe plus one (\fIsize\fP + 1 or strlen(\fItokens\fP) + 1).

On error, \fB-1\fP is returned and \fIerrno\fP is set accordingly.

\fB\fP

.SH ERROR

.TP
.B \fB0\fP
(Linux only)
The signalfd file descriptor could not be created.

.SS \fBjobserver_connect\fP()
.SS \fBjobserver_connect_to\fP()
.SS \fBjobserver_reconnect\fP()
.TP
.B EACCES
The jobserver pipe is closed because the current process was spawned
by Make without the \(cq+\(cq prefix, see section 13.1 of the
.UR https://www.gnu.org/software/make/
GNU Make documentation
.UE .
.TP
.B EBADF
Either one of the jobserver file descriptors is invalid.
.TP
.B ENODEV
No jobserver found.
.TP
.B EPROTO
(\fBjobserver_connect\fP() only)
Error while parsing the environment.

.SS
.BR jobserver_create ()
.SS
.BR jobserver_create_n ()
.TP
.B EINVAL
The number of tokens in the pipe exceeds \fBPIPE_BUF\fP.
.TP
.B EMFILE
Too many file descriptors for the process.
.TP
.B ENFILE
Too many file descriptors for the system.
.TP
.B ENOMEM
Not enough memory to set the environment variable.

.SS
.BR jobserver_close ()
.TP
.B EAGAIN
Cannot count tokens, call \fPjobserver_wait\fP(3) and try again.
.TP
.B EBUSY
Not all jobs have been waited for yet,
call \fPjobserver_collect\fP(3) and try again.
.TP
.B EIDRM
No jobs remain but some tokens have not been given back.
You might want to inform the user.

.SH SEE ALSO

.BR jobserver (7),
.BR jobserver_clear (3),
.BR jobserver_collect (3),
.BR jobserver_launch_job (3),
.BR jobserver_print (3),
.BR jobserver_getenv (3),
.BR jobserver_setenv (3),
.BR jobserver_terminate_job (3),
.BR jobserver_unsetenv (3),
.BR jobserver_wait (3)
